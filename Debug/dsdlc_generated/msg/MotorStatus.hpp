/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Raimondas\Desktop\GMM_BIG_V2_Firmware\Middlewares\msg\20011.MotorStatus.uavcan
 */

#ifndef MSG_MOTORSTATUS_HPP_INCLUDED
#define MSG_MOTORSTATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#Generic gimbal motor status

uint8 axis_id #Axis id

#Radians
float16 motor_pos_rad 		# could be inverted or identical to motor_pos_rad_raw
float16 motor_pos_rad_raw

#float16 bus_voltage	# V
#float16 bus_power		# W
#float16 shunt_voltage	# V
#float16 shunt_current	# A
******************************************************************************/

/********************* DSDL signature source definition ***********************
msg.MotorStatus
saturated uint8 axis_id
saturated float16 motor_pos_rad
saturated float16 motor_pos_rad_raw
******************************************************************************/

#undef axis_id
#undef motor_pos_rad
#undef motor_pos_rad_raw

namespace msg
{

template <int _tmpl>
struct UAVCAN_EXPORT MotorStatus_
{
    typedef const MotorStatus_<_tmpl>& ParameterType;
    typedef MotorStatus_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > axis_id;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > motor_pos_rad;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > motor_pos_rad_raw;
    };

    enum
    {
        MinBitLen
            = FieldTypes::axis_id::MinBitLen
            + FieldTypes::motor_pos_rad::MinBitLen
            + FieldTypes::motor_pos_rad_raw::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::axis_id::MaxBitLen
            + FieldTypes::motor_pos_rad::MaxBitLen
            + FieldTypes::motor_pos_rad_raw::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::axis_id >::Type axis_id;
    typename ::uavcan::StorageType< typename FieldTypes::motor_pos_rad >::Type motor_pos_rad;
    typename ::uavcan::StorageType< typename FieldTypes::motor_pos_rad_raw >::Type motor_pos_rad_raw;

    MotorStatus_()
        : axis_id()
        , motor_pos_rad()
        , motor_pos_rad_raw()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<40 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20011 };

    static const char* getDataTypeFullName()
    {
        return "msg.MotorStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool MotorStatus_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        axis_id == rhs.axis_id &&
        motor_pos_rad == rhs.motor_pos_rad &&
        motor_pos_rad_raw == rhs.motor_pos_rad_raw;
}

template <int _tmpl>
bool MotorStatus_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(axis_id, rhs.axis_id) &&
        ::uavcan::areClose(motor_pos_rad, rhs.motor_pos_rad) &&
        ::uavcan::areClose(motor_pos_rad_raw, rhs.motor_pos_rad_raw);
}

template <int _tmpl>
int MotorStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::axis_id::encode(self.axis_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_pos_rad::encode(self.motor_pos_rad, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_pos_rad_raw::encode(self.motor_pos_rad_raw, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int MotorStatus_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::axis_id::decode(self.axis_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_pos_rad::decode(self.motor_pos_rad, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_pos_rad_raw::decode(self.motor_pos_rad_raw, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature MotorStatus_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x9ABB8795DD0DF5E0ULL);

    FieldTypes::axis_id::extendDataTypeSignature(signature);
    FieldTypes::motor_pos_rad::extendDataTypeSignature(signature);
    FieldTypes::motor_pos_rad_raw::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef MotorStatus_<0> MotorStatus;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::msg::MotorStatus > _uavcan_gdtr_registrator_MotorStatus;

}

} // Namespace msg

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::msg::MotorStatus >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::msg::MotorStatus::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::msg::MotorStatus >::stream(Stream& s, ::msg::MotorStatus::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "axis_id: ";
    YamlStreamer< ::msg::MotorStatus::FieldTypes::axis_id >::stream(s, obj.axis_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "motor_pos_rad: ";
    YamlStreamer< ::msg::MotorStatus::FieldTypes::motor_pos_rad >::stream(s, obj.motor_pos_rad, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "motor_pos_rad_raw: ";
    YamlStreamer< ::msg::MotorStatus::FieldTypes::motor_pos_rad_raw >::stream(s, obj.motor_pos_rad_raw, level + 1);
}

}

namespace msg
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::msg::MotorStatus::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::msg::MotorStatus >::stream(s, obj, 0);
    return s;
}

} // Namespace msg

#endif // MSG_MOTORSTATUS_HPP_INCLUDED